@misc{TinyEMU,
  author = "Fabrice Bellard",
  title = "TINYEMU https://bellard.org/tinyemu (accessed 2018-12-28)",
  year = 2018,
  url = "https://bellard.org/tinyemu/",
  urldate = {2018-12-28}
}

@misc{riscv-spec,
  author = "Specification for RISC-V",
  title = "https://riscv.org/specifications/ (accessed 2018-12-28)",
  year = 2018,
  url = "https://riscv.org/specifications/",
  urldate = {2018-12-28}
}

@misc{riscv-main,
  author = "RISC-V Foundation",
  title = "https://riscv.org (accessed 2018-12-28)",
  year = 2018,
  url = "https://riscv.org/",
  urldate = {2018-12-28}
}

@misc{riscv-rocket-chip,
    Author = {Asanović, Krste and Avizienis, Rimas and Bachrach, Jonathan and Beamer, Scott and Biancolin, David and Celio, Christopher and Cook, Henry and Dabbelt, Daniel and Hauser, John and Izraelevitz, Adam and Karandikar, Sagar and Keller, Ben and Kim, Donggyu and Koenig, John and Lee, Yunsup and Love, Eric and Maas, Martin and Magyar, Albert and Mao, Howard and Moreto, Miquel and Ou, Albert and Patterson, David A. and Richards, Brian and Schmidt, Colin and Twigg, Stephen and Vo, Huy and Waterman, Andrew},
    Title = {The Rocket Chip Generator},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2016},
    Month = {Apr},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-17.html},
    Number = {UCB/EECS-2016-17},
    Abstract = {Rocket Chip is an open-source Sysem-on-Chip design generator that emits synthesizable RTL. It leverages the Chisel hardware construction language to compose a library of sophisticated generators for cores, caches, and interconnects into an integrated SoC. Rocket Chip generates general-purpose processor cores that use the open RISC-V ISA, and provides both an in-order core generator (Rocket) and an out-of-order core generator (BOOM). For SoC designers interested in utilizing heterogeneous specialization for added efficiency gains, Rocket Chip supports the integration of custom accelerators in the form of instruction set extensions, coprocessors, or fully independent novel cores. Rocket Chip has been taped out (manufactured) eleven times, and yielded functional silicon prototypes capable of booting Linux.}
}

@misc{riscv-rocket-lab,
  author = {{RISC-V, Spike, and the Rocket Core}},
  title = "www-inst.eecs.berkeley.edu/~cs250/fa13/handouts/lab2-riscv.pdf (accessed 2018-12-28)",
  year = 2018,
  url = "www-inst.eecs.berkeley.edu/~cs250/fa13/handouts/lab2-riscv.pdf",
  urldate = {2018-12-28}
}

@misc{Celio:EECS-2017-157,
    Author = {Celio, Christopher and Chiu, Pi-Feng and Nikolic, Borivoje and Patterson, David A. and Asanović, Krste},
    Title = {BOOM v2: an open-source out-of-order RISC-V core},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2017},
    Month = {Sep},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2017/EECS-2017-157.html},
    Number = {UCB/EECS-2017-157},
    Abstract = {This paper presents BOOM version 2, an updated version of the Berkeley Out-of-Order Machine. The design exploration was performed through synthesis, place and route using the foundry-provided standard-cell library and the memory compiler in the TSMC 28 nm HPM process (high performance mobile).

BOOM is an open-source processor that implements the RV64G RISC-V Instruction Set Architecture (ISA). Like most contemporary high-performance cores, BOOM is superscalar (able to execute multiple instructions per cycle) and out-of-order (able to execute instructions as their dependencies are resolved and not restricted to their program order).  BOOM is implemented as a parameterizable generator written using the Chisel hardware construction language that can used to generate synthesizable implementations targeting both FPGAs and ASICs.

BOOMv2 is an update in which the design effort has been informed by analysis of synthesized, placed and routed data provided by a contemporary industrial tool flow. We also had access to standard single- and dual-ported memory compilers provided by the foundry, allowing us to explore design trade-offs using different SRAM memories and comparing against synthesized flip-flop arrays. The main distinguishing features of BOOMv2 include an updated 3-stage front-end design with a bigger set-associative Branch Target Buffer (BTB); a pipelined register rename stage; split floating point and integer register files; a dedicated floating point pipeline; separate issue windows for floating point, integer, and memory micro-operations; and separate stages for issue-select and register read.  

Managing the complexity of the register file was the largest obstacle to improving BOOM's clock frequency. We spent considerable effort on placing-and-routing a semi-custom 9-port register file to explore the potential improvements over a fully synthesized design, in conjunction with microarchitectural techniques to reduce the size and port count of the register file. BOOMv2 has a 37 fanout-of-four (FO4) inverter delay after synthesis and 50 FO4 after place-and-route, a 24% reduction from BOOMv1's 65 FO4 after place-and-route. Unfortunately, instruction per cycle (IPC) performance drops up to 20%, mostly due to the extra latency between load instructions and dependent instructions. However, the new BOOMv2 physical design paves the way for IPC recovery later.}
}

@misc{conf/ispass/2007,
  added-at = {2015-05-04T00:00:00.000+0200},
  author = {Yourst, Matt T.},
  biburl = {https://www.bibsonomy.org/bibtex/297e3913dfc5136ff2849a6041e50fb3d/dblp},
  booktitle = {ISPASS},
  crossref = {conf/ispass/2007},
  ee = {http://doi.ieeecomputersociety.org/10.1109/ISPASS.2007.363733},
  interhash = {cf240b4405edf3d02c1f5e7c34ca3e3d},
  intrahash = {97e3913dfc5136ff2849a6041e50fb3d},
  isbn = {1-4244-1081-9},
  keywords = {dblp},
  pages = {23-34},
  publisher = {IEEE Computer Society},
  timestamp = {2015-06-18T15:50:03.000+0200},
  title = {PTLsim: A Cycle Accurate Full System x86-64 Microarchitectural Simulator.},
  url = {http://dblp.uni-trier.de/db/conf/ispass/ispass2007.html#Yourst07},
  year = 2007
}

@misc{marss-x86,
author={A. Patel and F. Afram and S. Chen and K. Ghose},
booktitle={2011 48th ACM/EDAC/IEEE Design Automation Conference (DAC)},
title={MARSS: A full system simulator for multicore x86 CPUs},
year={2011},
volume={},
number={},
pages={1050-1055},
keywords={instruction sets;multiprocessing systems;MARSS;multicore x86 CPU processor;QEMU;full system simulator;Multicore processing;Emulation;Random access memory;Benchmark testing;Kernel;Context modeling;Switches;Multi-core x86 CPU Simulator;Emulator;Full-System Simulator;Heterogeneous Multi-core Systems},
doi={},
ISSN={85-644924},
month={June}}

@misc{Rosenfeld:2011:DCA:1999163.1999216,
 author = {Rosenfeld, Paul and Cooper-Balis, Elliott and Jacob, Bruce},
 title = {DRAMSim2: A Cycle Accurate Memory System Simulator},
 journal = {IEEE Comput. Archit. Lett.},
 issue_date = {January 2011},
 volume = {10},
 number = {1},
 month = jan,
 year = {2011},
 issn = {1556-6056},
 pages = {16--19},
 numpages = {4},
 url = {http://dx.doi.org/10.1109/L-CA.2011.4},
 doi = {10.1109/L-CA.2011.4},
 acmid = {1999216},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {DRAM, Simulation, Primary memory},
}
